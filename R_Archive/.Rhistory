d1
nextday
receipt_date <- mdy("6-07-2016")
shipped_date <- mdy("5-24-2016")
ordered_date <- mdy("5-14-2016")
transportation_lead_time <- receipt_date - shipped_date
transportation_lead_time
total_lead_time <- receipt_date - ordered_date
total_lead_time
class(total_lead_time) # difftime
as.numeric(total_lead_time)  # conversion to numeric format
difftime(receipt_date, shipped_date, unit="sec") #sec unit
difftime(receipt_date, shipped_date, unit="week") #week unit
day(receipt_date)  # the 28th day of month
month(receipt_date)  # falls on the 11th month of the year
months(receipt_date)  # if you want month in character
week(receipt_date)  # falls on the 48th week
weekdays(receipt_date)  # is a friday
quarter(receipt_date)  # falls on the 4th quarter
quarters(receipt_date) # alternate format of quarter - Q4
year(receipt_date) # find year
install.packages('Hmisc')
library(Hmisc)
library(Hmisc)
monthDays(receipt_date) #find number of days in month of d1
yearDays(receipt_date) # find the number of days in the year
miadate <- strptime("6-25-2017", format = '%Y-%d-%m')
miadate
miadate <- strptime("6-25-2017", format = '%m-%d-%y')
miadate
date_string <- "6-25-2017"
miadate <- lubridate::mdy(date_string)
miadate <- strptime("6-25-2017", format = '%m-%d-%y')
miadate <- anytime::anydate(date_string)
miadate
miadate
miadate
future_date <- date + 100
future_date
reviews <- c("spongy burgers", "hot and good","crispier than expected",
"hard to chew", "too large to chew", "takes time", "filling",
"unhealthy but delicious" )
pages <- sample(1:100)
page_likes <- round(runif(30,1000,8000),0)
reviews
pages
page_likes
m <- list(reviews,pages,page_likes)
m
class(m)
m[1]
class(m[1])
m[[1]]
class(m[[1]])
m[[1]][4]
m <- list(reviews=reviews, pages=pages, page_likes=page_likes)
m
class(m)
m[[1]]
m$reviews
m$reviews[4]
m1 <- unlist(m)
m1
m1[4]
countries <- c("China","UK","USA","France", "Greece","Spain", "Italy")
n <- list(countries, m)
class(n)
n
n <- list(countries, m)
n
n[2]
n[[2]]
n[[2]][[1]][4]
reviews <- c("spongy burgers", "hot and good","crispier than expected",
"hard to chew", "too large to chew", "takes time", "filling",
"unhealthy but delicious" )
set.seed(100)
pages <- 1:100
page_likes <- round(runif(30,1000,8000),0)
m <- list(reviews,pages,page_likes)
m[[3]][10]
mylist <- list(sample(letters, 75, replace=T),
sample(1:26, 75, replace=T))
mylist
mylist[[2]][mylist[[1]] == 'j']
country    <- c("France", "Germany", "Greece", "Italy", "Portugal", "Spain") # Countries
gdp_growth <- c(1.3, 0.3, 1.9, 0.3, NA, 2)   # GDP growth rate
mkt_type   <- factor(c("High", "High", "Low", "Medium", "Low", "Medium"))  # Categories
# View
country
gdp_growth
mkt_type
df <- data.frame(country = country, gdp_grwth = gdp_growth, `market typ` = mkt_type)
df
class(df)
typeof(df)  # a list. Because, DataFrame inherently is built on top of a list
View(df)
edit(df)
df_edited <- edit(df)
df_edited
df$country
df$gdp_grwth
df$country
df$gdp_grwth
df
df <- data.frame(country = country, gdp_grwth = gdp_growth, `market typ` = mkt_type)
df
df
df$country
df$`market typ`
df$`market typ`
df$new_column <- abbreviate(df$country, 3)
abbreviate(df$country, 3)
df <- data.frame(country     = country,
gdp_grwth   = gdp_growth,
market_typ  = mkt_type,
dummycolumn = 0)
df
df$new_column
df$new_column <- abbreviate(df$country, 3)
abbreviate(df$country, 3)
df$new_column
df
df <- data.frame(country     = country,
gdp_grwth   = gdp_growth,
market_typ  = mkt_type,
dummycolumn = c(1,2,3))
df
str(df)
class_of_df <- sapply(df, class)
class_of_df
df <- data.frame(country          = country,
gdp_grwth        = gdp_growth,
market_typ       = mkt_type,
stringsAsFactors = F)
str(df)
df <- data.frame(country    = country,
gdp_grwth  = gdp_growth,
market_typ = mkt_type)
str(df)
df$country <- as.character(df$country)
df2 <- cbind(df, df)
df2
df3 <- rbind(df2, df2)
df3
str(df3)
df_solut <- data.frame(alphabets = A:Z, numbers = 1:26)
df_solut
df_solut <- data.frame(alphabets = A:Z, numbers = 1:26)
df_solut <- data.frame(alphabets = letters, numbers = 1:26)
df_solut
df_sol <- edit(df_sol)
df_solut <- edit(df_solut)
df_solut <- edit(df_solut)
edit(df_sol)
df_sol <- data.frame(alphabets=letters, numbers=1:26)
# Use Visual Editor to change
df_sol <- edit(df_sol)
country    <- c("France", "Germany", "Greece", "Italy", "Portugal", "Spain") # Countries
gdp_growth <- c(1.3, 0.3, 1.9, 0.3, NA, 2)   # GDP growth
mkt_type   <- factor(c("High", "High", "Low", "Medium", "Low", "Medium"))  # Categories
df         <- data.frame(country = country,
gdp_grwth = gdp_growth,
market_typ = mkt_type,
stringsAsFactors = F)
df
df <- rbind(df, df, df, df)
df
class(df)
head(df)
head(df, 10)
tail(df)
tail(df, 10)
dim(df)
nrow(df)
NROW(df)
ncol(df)
NCOL(df
nrow(country)
NROW(country)
rownames(df)
rownames(df) <- paste0('row_', rownames(df))
rownames(df)
colnames(df)
colnames(df) <- c("Country", "GDP Growth", "Market Type")
colnames(df)
df$`GDP Growth`
summary(df)
str(df)
source('https://bit.ly/38AN2As')
source
country    <- c("France", "Germany", "Greece",
"Italy", "Portugal", "Spain", 'Spain')    # Countries
gdp_growth <- c(1.3, 0.3, 1.9, 0.3, NA, 2, 0) # GDP growth
mkt_type   <- factor(c("High", "High", "Low", "Medium", "Low", "Medium", 'Low'))  # Categories
df <- data.frame(country = country,
gdp_grwth = gdp_growth,
market_typ = mkt_type,
stringsAsFactors = F)
df <- rbind(df, df, df, df)
df <- rbind(df, df, df, df)
dim(df)
colnames(df) <- paste0('column_', colnames(df))
colnames(df)
colnames(df) <- paste0('column_', (df))
colnames(df)
colnames(df) <- paste0('column_', colnames)
colnames(df)
dim(df)
colnames(df) <- c('Column_1', 'Column_2', 'Column_3')
colnames(df)
head(tail(df, 2), 1)
unique(df)
sapply(df, unique)
country    <- c("France", "Germany", "Greece", "Italy", "Portugal", "Spain")   # Countries
gdp_growth <- c(1.3, 0.3, 1.9, 0.3, NA, 2)   # GDP growth
mkt_type   <- factor(c("High", "High", "Low", "Medium", "Low", "Medium"))   # Categories
df         <- data.frame(country = country,
gdp_grwth = gdp_growth,
market_typ = mkt_type,
stringsAsFactors = F)
df$country
df
df[, c(1)]
df[, c('country')]
df[c(1,2,3,4,5), c('country')]
df[-c(6), c('country')]
df[c('1','2','3','4','5'), c('country')]
df
df$country <- NULL
head(df)
df$country <- country
df
df[, -1]
df2 <- df[, -c(1, 2)]
df2
!colnames(df) %in% 'country']
!colnames(df) %in% 'country'
df[, !colnames(df) %in% 'country']
df[-c(1, 3, 5), ]
country    <- c("France", "Germany", "Greece", "Italy", "Portugal", "Spain")   # Countries
gdp_growth <- c(1.3, 0.3, 1.9, 0.3, NA, 2)   # GDP growth
mkt_type   <- factor(c("High", "High", "Low", "Medium", "Low", "Medium"))  # Categories
df         <- data.frame(country = country,
gdp_growth = gdp_growth,
market_typ = mkt_type,
stringsAsFactors = F)
df$mkt_type <- NULL
df$mkt_type <- NULL
head(df)
df$mkt_type <- NULL
df$mkt_type
head(df)
df
df$market_typ <- NULL
df$market_typ
rownums <- seq(2,NROW(df),2)
df[rownums, ]
df[5, 'gdp_growth'] <- mean(df$gdp_growth, na.rm = T)
df
country    <- c("France", "Germany", "Greece", "Italy", "Portugal", "Spain") # Countries
gdp_growth <- c(1.3, 0.3, 1.9, 0.3, NA, 2)   # GDP growth
mkt_type   <- factor(c("High", "High", "Low", "Medium", "Low", "Medium"))  # Categories
df <- data.frame(country = country,
gdp_grwth = gdp_growth,
market_typ = mkt_type, stringsAsFactors = F)
country    <- c("France", "Germany", "Greece", "Italy", "Portugal", "Spain") # Countries
gdp_growth <- c(1.3, 0.3, 1.9, 0.3, NA, 2)   # GDP growth
mkt_type   <- factor(c("High", "High", "Low", "Medium", "Low", "Medium"))  # Categories
df <- data.frame(country = country,
gdp_grwth = gdp_growth,
market_typ = mkt_type, stringsAsFactors = F)
df
attributes(df)
attr(df, 'source') = 'manmade'
attributes(df)
attr(df, 'source')
comment(df) <- "Performance Dataframe"
comment(df)
attributes(df)
str(df)
df
country    <- c("France", "Germany", "Greece", "Italy", "Portugal", "Spain") # Countries
gdp_growth <- c(1.3, 0.3, 1.9, 0.3, NA, 2)   # GDP growth
mkt_type   <- factor(c("High", "High", "Low", "Medium", "Low", "Medium"))  # Categories
df <- data.frame(country = country,
gdp_grwth = gdp_growth,
market_typ = mkt_type,
stringsAsFactors = F)
attr(df, 'name') = 'market_performance'
attributes(df)
attr(df, 'name')
comment(df) <- "Contains more user defined attributes"
comment(df)
country    <- c("France", "Germany", "Greece", "Italy", "Portugal", "Spain") # Countries
gdp_growth <- c(1.3, 0.3, 1.9, 0.3, NA, 2)   # GDP growth
mkt_type   <- factor(c("High", "High", "Low", "Medium", "Low", "Medium"))  # Categories
df         <- data.frame(country = country,
gdp_grwth = gdp_growth,
market_typ = mkt_type)
df
dir_path <- 'C:/Users/NDH00130/Documents/Playground'
setwd(dir_path)
dir_path <- 'C:/Users/Maria/Documents/RInformation/'
setwd(dir_path)
getwd()
write.csv(df, "economic_performance_RowTrue.csv", row.names = T)
getwd()
dir_path <- 'C:/Users/Maria/Documents/RInformation/'
setwd(dir_path)
getwd()
write.csv(df, "economic_performance.csv", row.names = F)
RInformation
write.csv(df, "economic_performance.csv", row.names = F)
write.csv(df, "economic_performance_RowTrue.csv", row.names = T)
getwd()
dir_name       <- "C:/Users/Maria/Documents/RInformation/"
file_name      <- "economic_performance_newpath"
ext            <- "csv"
file_name_ext  <- paste0(file_name, '.', ext)
ext
file_name_ext
path <- file.path(dir_name, file_name_ext) # full path
path
file.exists(path
file.exists(path
file.exists
# Check if file exists and then write
if(file.exists(path)){
# Add '_copy' to end of file name and write
file_name <- paste0(file_name, '_copy')
file_name_ext <- paste0(file_name, '.', ext)
path <- file.path(dir_name, file_name_ext) # full path
write.csv(df, path, row.names = F)
}else{
# write
write.csv(df, path, row.names = F)  # write to file
}
# Check if file exists and then write
if(file.exists(path)){
# Add '_copy' to end of file name and write
file_name <- paste0(file_name, '_copy')
file_name_ext <- paste0(file_name, '.', ext)
path <- file.path(dir_name, file_name_ext) # full path
write.csv(df, path, row.names = F)
}else{
# write
write.csv(df, path, row.names = F)  # write to file
}
path <- file.path("C:/Users/Maria/Documents/RInformation/",  "economic_performance_newpath.RDS")
path
saveRDS(df, path, compress = "gzip")
df_eco_perf <- readRDS(path)
df_eco_perf
save.image('all_data.RData')
load('all_data.RData')
ls()
rm(list=ls())
ls()
rm(list=ls())
ls()
load('all_data.RData')
ls()
dir_name <- '"C:/Users/Maria/Documents/RInformation/Dataframes_Matrices/Input'
path <- file.path(dir_name, "GDP_Growth.csv")
path
path
df_gdpgrowth <- read.table(path, sep=",", header = T)
df_gdpgrowth <- read.table(path, sep=",", header = T)
df_gdpgrowth
df_gdpgrowth <- read.csv(path)
df_gdpgrowth
url <- 'https://raw.githubusercontent.com/selva86/datasets/master/Auto.csv'
df_internet <- read.csv(url)
df_internet
install.packages(c('haven', 'xlsx'))
library(haven)   # import SAS, SPSS and Stata files
library(xlsx)
library(haven)
library(xlsx)
path <- file.path(dir_name,"Inflation_Rate.xlsx")
path
df_inf <- xlsx::read.xlsx(path, sheetName="Sheet1")
xlsx::read.xlsx(path
df_inf <- xlsx::read.xlsx(path, sheetName="Sheet1")
dir_name <- 'C:/Users/NDH00130/Documents/Playground/Dataframes_Matrices/Input'
df_sas <- read_sas(file.path(dir_name, "airline.sas7bdat"))
dir_name <- 'C:/Users/NDH00130/Documents/RInformation/Dataframes_Matrices/Input'
dir_name
df_sas <- read_sas(file.path(dir_name, "airline.sas7bdat"))
dir_name <- 'C:/Users/NDH00130/Documents/RInformation/Dataframes_Matrices/Input'
df_sas <- read_sas(file.path(dir_name, "airline.sas7bdat")) # Import a SAS file of the format .sas7bdat
View(df_sas)
df_sav <- read_sav(file.path(dir_name, "experim.sav")) # SPSS files using read_sav
View(df_sav)
df_por <- read_por(file.path(dir_name, "world_95.por")) # SPSS files using read_por
View(df_por)
library(haven)
library(haven)
df_sav <- read_sav(file.path(dir_name, "experim.sav")) # SPSS files using read_sav
View(df_sav)
df_por <- read_por(file.path(dir_name, "world_95.por")) # SPSS files using read_por
View(df_por)
library(haven)
df_sav <- read_sav(file.path(dir_name, "experim.sav")) # SPSS files using read_sav
View(df_sav)
df_por <- read_por(file.path(dir_name, "world_95.por")) # SPSS files using read_por
View(df_por)
library(haven)
df_sav <- read_sav(file.path(dir_name, "experim.sav")) # SPSS files using read_sav
View(df_sav)
library(haven)
df_dta <- read_dta(file.path(dir_name, "alcohol.dta")) # stata files using read_dta
View(df_dta)
library(haven)
df_dta <- read_dta(file.path(dir_name, "alcohol.dta"))
setwd('C:/Users/NDH00130/Documents/Playground/')
url <- https://raw.githubusercontent.com/selva86/datasets/master/1M.csv'
url <- 'https://raw.githubusercontent.com/selva86/datasets/master/1M.csv'
url
df <- read.csv('https://raw.githubusercontent.com/selva86/datasets/master/1M.csv')
saveRDS(df, '1m.RDS', compress = T)
df_rds <- write.csv(df, '1m.csv', row.names = F)
rds_filesize <- file.info("1m.RDS")$size/1024**2
rds_filesize
rds_filesize
csv_filesize <- file.info("1m.csv")$size/1024**2
csv_filesize
system.time({df_rds <- readRDS('1m.RDS')})
system.time({df_csv <- read.csv('1m.csv')})
library(help="datasets")
View(mtcars)
iris
view(iris)
view(iris)
View(iris)
USArrests
cars
AirPassengers
ChickWeight
forecast
# 1. forecast
# 2. fpp
carData
install.packages('ISLR')
library(ISLR)
library(help=ISLR)
Auto
View(ISLR::Auto)
data_url   <- 'https://archive.ics.uci.edu/ml/machine-learning-databases/parkinsons/parkinsons.data'
data_url
df_import <- read.table(url, sep=',')
head(df_import)
head
table(df_import$V16)
df_import
install.packages(c('Hmisc', 'pastecs', 'psych', 'skimr', 'summarytools'))
install.packages(c("Hmisc", "pastecs", "psych", "skimr", "summarytools"))
date       <- rep(as.Date(c('2004-01-01')), 6)
country    <- c("France", "Germany", "Greece", "Italy", "Portugal", "Spain") # Countries
gdp_growth <- c(1.3, 0.3, 1.9, 0.3, NA, 2) # GDP growth
mkt_type   <- factor(c("High", "High", "Low", "Medium", "Low", "Medium"))  # Categories
df         <- data.frame(date       = date,
country    = country,
gdp_grwth  = gdp_growth,
market_typ = mkt_type, stringsAsFactors = F)
Hmisc::describe(df)
hmisc_output <- Hmisc::describe(df)
hmisc_output$market_typ
hmisc_output$market_typ$values
pastecs::stat.desc(df)
df_skimmed <- skimr::skim(df)
View(df_skimmed)
summarytools::descr(df)
psych::describe(df)
View(skimr::skim)
summarytools::descr
filepath <- "Dataframes_Matrices/Input/Country_Operating_Region.csv"
df       <- read.csv(filepath)
filepath <- "Dataframes_Matrices/Input/Country_Operating_Region.csv"
df       <- read.csv(filepath)
View(df)
filepath <- "Dataframes_Matrices/Input/Country_Operating_Region.csv"
filepath
df       <- read.csv(filepath)
df
read.csv(filepath)
df$Scope == "Include"
index
index    <- which(df$Scope == "Include")  # Returns all row numbers where scope is "Include"
index
df_include <- df[index, ]
View(df_include)
df_include2 <- df[df$Scope == "Include", ]
View(df_include2)
all.equal(df_include, df_include2)
filepath <- "Dataframes_Matrices/Input/Country_Operating_Region.csv"
df       <- read.csv(filepath)
View(df)
function (x, df1, df2, ncp, log = FALSE)
{
if (missing(ncp))
.Call(C_df, x, df1, df2, log)
else .Call(C_dnf, x, df1, df2, ncp, log)
}
filepath
View(df)
df
# Solution ---------------------------------------------------------------------------
df[df == ''] <- NA
rows <- which(is.na(df$Country) | is.na(df$Operating.Region))
df[rows, ]
